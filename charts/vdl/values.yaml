# Default values for vdl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: ghcr.io/rosemanlabs/vdl
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
imageCredentials:
  name: creds-pull
  registry: ghcr.io/rosemanlabs
  username:
  password: 
  email: ""

healthContainer:
  enabled: false
  repository: ghcr.io/rosemanlabs/engine-healthcontainer
  tag: "v0.1.1"

nameOverride: ""
fullnameOverride: ""

core:
  nodeNr:
  peerAHostname: "tbd"
  peerBHostname: "tbd"
  peerAPort: "6000"
  peerBPort: "6000"
  cores: "1"
  logLevel: "debug"
  persistenceMode: "1"
  dynamicConfigMode: "0"
  sni: "0"
  # This value needs to be in bytes because of a bug in Helm
  # that always converts big numbers to scientific notation.
  # See: https://github.com/helm/helm/issues/1707
  maxCacheSize: "1000000000bytes"
  maxCacheAge: 28800 # 8 hour default
  # legacy properties:
  scriptSignMode: "0"
  scriptSignKeys:

secrets:
  selfsignedcaCrt:
  licenseKey:
  httpd0Crt:
  httpd0Key:
  httpd1Crt:
  httpd1Key:
  httpd2Crt:
  httpd2Key:
  server0Crt:
  server0Key:
  server0Pk:
  server0SkB64:
  server1Crt:
  server1Key:
  server1Pk:
  server1SkB64:
  server2Crt:
  server2Key:
  server2Pk:
  server2SkB64:
  sign0PkB64:
  sign1PkB64:
  sign2PkB64:
  sign0Pk:
  sign1Pk:
  sign2Pk:
  webAppPk:

# vpnEnabled set to true will create a VPN client sidecar to connect the VDL node to a VPN
vpnEnabled: false

# vpnLogLevel is the verbosity level of OpenVPN
vpnLogLevel: "3"

# vpnConfigFile should contain the contents of a .ovpn file. It is used to connect the VPN client container to a VPN server
vpnConfigFile:

# loggingEnabled: if enabled, will create a Grafana Alloy sidecar. NOTE: vpnEnabled must be true for this setup to work
loggingEnabled: false
logging:
  isHost: false
  lokiEndpoint: "" #__FILL_IN_VPN_IP_HERE__:3100/loki/api/v1/push
  node1Namespace: ""
  node2Namespace: ""

lokiVpnConfigFile:

grafanaVpnConfigFile: 

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

serviceN2n:
  type: LoadBalancer
  exposePort: 6000

serviceCrandas:
  enabled: false # by default, most nodes will not be running a local crandas port
  type: LoadBalancer
  exposePort: 9820

pvc:
  storageClassName:
  size: 5Gi

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
externalDns:
  enabled: false
  target: "" # Fill in LoadBalancer or Reverse-Proxy IP in here
  host: "" # Fill in the desired hostname for the DNS record, e.g. vdl-example.rosemancloud.com

resources:
  # Explicit (minimal) requirements for VDL
  # NOTE: cpus > 1 requires a range of ports to be opened
  limits:
    cpu: 1
    memory: 1024Mi
  requests:
    cpu: 1
    memory: 1024Mi

nodeSelector: {}

tolerations: []

affinity: {}

loki:
  deploymentMode: SingleBinary
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    schemaConfig:
      configs:
      - from: "2024-01-01"
        store: tsdb
        index:
          prefix: loki_index_
          period: 24h
        object_store: filesystem # we're storing on filesystem so there's no real persistence here.
        schema: v13
    podSecurityContext:
      runAsNonRoot: false
    containerSecurityContext:
        allowPrivilegeEscalation: true
  singleBinary:
    replicas: 1
  read:
    replicas: 0
  backend:
    replicas: 0
  write:
    replicas: 0
  test:
    enabled: false
  lokiCanary:
    enabled: false
  singleBinary:
    initContainers:
    - name: vpn-config-setup
      image: "ghcr.io/rosemanlabs/images/alpine:3.20.1"
      command: ['sh', '-c', "cp /config/client.ovpn /data/vpn/client.ovpn"]
      volumeMounts:
        - name: vpnconfig
          mountPath: /config
        - name: loki-ephemeral
          mountPath: /data/vpn
    extraContainers:
    - name: openvpn-client
      image: ghcr.io/wfg/openvpn-client:3.1.0
      imagePullPolicy: Always
      volumeMounts:
        - name: loki-ephemeral
          mountPath: /data/vpn
      env:
        - name: VPN_CONFIG_FILE
          value: client.ovpn
        - name: VPN_LOG_LEVEL
          value: "3"
        - name: ALLOWED_SUBNETS
          value: 
        - name: AUTH_SECRET
          value: 
      securityContext: # It is necessary to set the user as root for the openvpn container, otherwise the container does not have sufficient permissions to access system files
        runAsUser: 0
        runAsGroup: 0
        privileged: true
        capabilities:
          add:
            - "NET_ADMIN"
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 100m
          memory: 100Mi
    extraVolumes:
    - name: loki-ephemeral
      emptyDir:
        sizeLimit: 20Mi
    - name: vpnconfig
      secret:
        secretName: loki-vpn-config
        optional: false

grafana:
  dashboardProviders:
    loki_dashboardprovider.yaml:
      apiVersion: 1
      providers:
      - name: 'rosemanlabs'
        orgId: 1
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/rosemanlabs
  extraVolumes:
  - name: loki-dashboard
    configMap:
      name: loki-dashboard
      items:
        - key: dashboard.json
          path: dashboard.json
  extraVolumeMounts:
  - name: loki-dashboard
    mountPath: /var/lib/grafana/dashboards/rosemanlabs

  securityContext:
    runAsNonRoot: false
  extraInitContainers:
  - name: vpn-config-setup
    image: "ghcr.io/rosemanlabs/images/alpine:3.20.1"
    command: ['sh', '-c', "cp /config/client.ovpn /data/vpn/client.ovpn"]
    volumeMounts:
      - name: vpnconfig
        mountPath: /config
      - name: grafana-ephemeral
        mountPath: /data/vpn
  extraContainerVolumes:
  - name: grafana-ephemeral
    emptyDir:
      sizeLimit: 20Mi
  - name: vpnconfig
    secret:
      secretName: grafana-vpn-config
      optional: false
  extraContainers: |
    - name: openvpn-client
      image: ghcr.io/wfg/openvpn-client:3.1.0
      imagePullPolicy: Always
      volumeMounts:
        - name: grafana-ephemeral
          mountPath: /data/vpn
      env:
        - name: VPN_CONFIG_FILE
          value: client.ovpn
        - name: VPN_LOG_LEVEL
          value: "3"
        - name: ALLOWED_SUBNETS
          value: 
        - name: AUTH_SECRET
          value: 
      securityContext: # It is necessary to set the user as root for the openvpn container, otherwise the container does not have sufficient permissions to access system files
        runAsUser: 0
        runAsGroup: 0
        privileged: true
        capabilities:
          add:
            - "NET_ADMIN"
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 100m
          memory: 100Mi
