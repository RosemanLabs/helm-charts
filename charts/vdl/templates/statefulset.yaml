apiVersion: v1
kind: ConfigMap
metadata:
  name: engine-node-{{ .Values.core.nodeNr }}-envs
data:
  NODE_NR:   {{ .Values.core.nodeNr | quote }}
  NODE_PEER_A_HOSTNAME:   {{ .Values.core.peerAHostname | quote }}
  NODE_PEER_B_HOSTNAME:   {{ .Values.core.peerBHostname | quote }}
  NODE_PEER_A_PORT:   {{ .Values.core.peerAPort | quote }}
  NODE_PEER_B_PORT:   {{ .Values.core.peerBPort | quote }}
  NODE_VDL_PORT: "6000"
  NODE_HTTPS_PORT: "9820"
  NODE_LIVENESS_PORT: "4240"
  NODE_CORES:   {{ .Values.core.cores | quote }}
  NODE_USE_SNI: {{ .Values.core.sni | quote }}
  NODE_PORT_PER_CORE_MODE: "1"
  NODE_MEMORY: {{ .Values.core.memory | quote }}
  {{- if .Values.core.scriptSignMode }}
  NODE_SCRIPT_SIGN_MODE: {{ .Values.core.scriptSignMode | quote }}
  {{- end }}
  {{- if .Values.core.scriptSignKeys }}
  NODE_SCRIPT_SIGN_KEYS: {{ .Values.core.scriptSignKeys | quote }}
  {{- end }}
  NODE_PERSISTENCE_MODE: {{ .Values.core.persistenceMode | quote }}
  NODE_DYNAMIC_CONFIG_MODE: {{ .Values.core.dynamicConfigMode | quote }}
  NODE_DYNAMIC_CONFIG_FILE: "config.json"
  NODE_DISK_ONLY: "1"
  NODE_LOG_LEVEL: {{ .Values.core.logLevel | quote }}
  NODE_MAX_CACHE_AGE: {{ .Values.core.maxCacheAge | quote }}
  # This value needs the bytes suffix removed because of a bug in Helm
  # where big numbers (even if they are quoted) are automatically converted
  # to scientific notation. See: https://github.com/helm/helm/issues/1707
  NODE_MAX_CACHE_SIZE: {{ .Values.core.maxCacheSize | replace "bytes" "" | quote }}
  {{- if .Values.core.auxFlags }}
  NODE_AUX_FLAGS: {{ .Values.core.auxFlags | quote }}
  {{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "vdl.fullname" . }}
  labels:
    {{- include "vdl.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "vdl.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "vdl.fullname" . }}-n2n
  # ^ TODO
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "vdl.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
      - name: {{ .Values.imageCredentials.name }}
      serviceAccountName: "vdl-alloy-{{- .Values.core.nodeNr }}" #{{ include "vdl.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: persistence
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-storage
        - name: dynamic-config
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-dynamic-config
        - name: secrets
          secret:
            secretName: {{ .Chart.Name }}-secret-vdl
            defaultMode: 420
            optional: false
        {{- if .Values.loggingEnabled }}
        - name: alloy-config
          configMap:
            name: alloy-config
            items:
              - key: config.alloy
                path: config.alloy
        {{- end}}
        {{- if .Values.vpnEnabled }}
        - name: ephemeral
          emptyDir:
            sizeLimit: 20Mi
        - name: vpnconfig
          secret:
            secretName: {{ .Chart.Name }}-vpn-config
            optional: false
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: persistence
              mountPath: /app/data
            - name: dynamic-config
              mountPath: /app/config
            - name: secrets
              mountPath: /app/secrets
          env:
            - name: NODE_NR
              value: {{ .Values.core.nodeNr | quote }}
            - name: NODE_PEER_A_HOSTNAME
              value: {{ .Values.core.peerAHostname | quote }}
            - name: NODE_PEER_B_HOSTNAME
              value: {{ .Values.core.peerBHostname | quote }}
            - name: NODE_PEER_A_PORT
              value: {{ .Values.core.peerAPort | quote }}
            - name: NODE_PEER_B_PORT
              value: {{ .Values.core.peerBPort | quote }}
            - name: NODE_VDL_PORT
              value: "6000"
            - name: NODE_HTTPS_PORT
              value: "9820"
            - name: NODE_LIVENESS_PORT
              value: "4240"
            - name: NODE_CORES
              value: {{ .Values.core.cores | quote }}
            - name: NODE_PORT_PER_CORE_MODE
              value: "1"
            - name: NODE_MEMORY
              value: {{ .Values.core.memory | quote }}
            - name: NODE_SCRIPT_SIGN_MODE
              value: {{ .Values.core.scriptSignMode | quote }}
            - name: NODE_SCRIPT_SIGN_KEYS
              value: {{ .Values.core.scriptSignKeys | quote }}
            - name: NODE_PERSISTENCE_MODE
              value: {{ .Values.core.persistenceMode | quote }}
            - name: NODE_DYNAMIC_CONFIG_MODE
              value: {{ .Values.core.dynamicConfigMode | quote }}
            - name: NODE_DYNAMIC_CONFIG_FILE
              value: "config.json"
            - name: NODE_DISK_ONLY
              value: "1"
            - name: NODE_LOG_LEVEL
              value: {{ .Values.core.logLevel | quote }}
            - name: NODE_MAX_CACHE_AGE
              value: {{ .Values.core.maxCacheAge | quote }}
            - name: NODE_MAX_CACHE_SIZE
            # This value needs the bytes suffix removed because of a bug in Helm
            # where big numbers (even if they are quoted) are automatically converted
            # to scientific notation. See: https://github.com/helm/helm/issues/1707
              value: {{ .Values.core.maxCacheSize | replace "bytes" "" | quote }}
            - name: NODE_AUX_FLAGS
              value: {{ .Values.core.auxFlags | quote }}
          {{- if not .Values.vpnEnabled }}
          livenessProbe:
            tcpSocket:
              port: 4240
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.loggingEnabled }}
        - name: vdl-log-collector
          image: grafana/alloy:v1.2.1
          imagePullPolicy: Always
          volumeMounts:
            - name: alloy-config
              mountPath: /etc/alloy/config.alloy
              subPath: config.alloy
          resources:
            limits:
              memory: 100Mi # TODO: check if this is reasonable
            requests:
              cpu: 10m
              memory: 100Mi
        {{- end }}
        {{- if .Values.vpnEnabled }}
        - name: openvpn-client
          image: ghcr.io/wfg/openvpn-client:3.1.0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: ephemeral
              mountPath: /data/vpn
          env:
            - name: VPN_CONFIG_FILE
              value: client.ovpn
            - name: VPN_LOG_LEVEL
              value: {{ .Values.vpnLogLevel | quote }}
            - name: ALLOWED_SUBNETS
              value: 
            - name: AUTH_SECRET
              value: 
          securityContext:
            privileged: true
            capabilities:
              add:
               - "NET_ADMIN"
          resources:
            limits:
              memory: 100Mi # TODO: check if this is reasonable
            requests:
              cpu: 100m
              memory: 100Mi
        {{- end }}
      # The vpn-client image needs rw access to the folder in which the config file is stored, therefore
      # the initcontainer copies the config file stored in a ro-mounted secret to a rw-mounted ephemeral volume
      initContainers:
      {{- if .Values.vpnEnabled }}
        - name: vpn-config-setup
          image: "alpine:3.12"
          command: ['sh', '-c', "cp /config/client.ovpn /data/vpn/client.ovpn"]
          volumeMounts:
            - name: vpnconfig
              mountPath: /config
            - name: ephemeral
              mountPath: /data/vpn
      {{- end }}
      {{- if or (eq .Values.core.dynamicConfigMode "1") (eq .Values.core.dynamicConfigMode "true") }}
        # NOTE: this logic may be moved into the main docker image later on
        - name: vdl-config-setup
          image: apteno/alpine-jq
          command:
            - /bin/sh
            - '-xc'
            - "test -e /config/config.json || jq -n --arg key \"$(base64 /tmp/web_app.pk)\" '{\"authorization_public_keys\":[$key],\"version\":\"1\"}' > /config/config.json"
          volumeMounts:
            - name: secrets
              mountPath: /tmp/web_app.pk
              subPath: web_app.pk
            - name: dynamic-config
              mountPath: /config
      {{- end }}
      {{- if .Values.healthContainer.enabled }}
        - name: health
          image: "{{ .Values.healthContainer.repository }}:{{ .Values.healthContainer.tag }}"
          envFrom:
            - configMapRef:
                name: engine-node-{{ .Values.core.nodeNr }}-envs
          volumeMounts:
            - name: persistence
              mountPath: /app/data
            - name: dynamic-config
              mountPath: /app/config
            - name: secrets
              mountPath: /app/secrets
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
